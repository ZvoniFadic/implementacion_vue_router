{"remainingRequest":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/src/components/Articulo.vue?vue&type=template&id=0da5a0ea&scoped=true&","dependencies":[{"path":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/src/components/Articulo.vue","mtime":1628817759742},{"path":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zvonimir/Desktop/Bootcamp/e-camp/M4_desarrollo _con_vue_js/4_vue_router/dia_2/desafío_implementación_de_vue_router/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}